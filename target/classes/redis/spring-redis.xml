<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 读取redis配置文件 -->
    <context:property-placeholder location="classpath:redis/redis.properties"/>

    <!-- 开启注解 -->
    <context:component-scan base-package="com.java.base.nosql.redis.*"/>

    <!--     Jedis连接池配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxActive}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>
    <!--    <bean id="hostport1" class="redis.clients.jedis.HostAndPort">
            <constructor-arg name="host" value="${redis.host}"/>
            <constructor-arg name="port" value="${redis.port}"/>
        </bean>
         redis集群配置 start
        <bean id="hostport1" class="redis.clients.jedis.HostAndPort">
            <constructor-arg name="host" value="${redis.host1}"/>
            <constructor-arg name="port" value="${redis.port1}"/>
        </bean>
        <bean id="hostport2" class="redis.clients.jedis.HostAndPort">
            <constructor-arg name="host" value="${redis.host2}"/>
            <constructor-arg name="port" value="${redis.port2}"/>
        </bean>
        <bean id="hostport3" class="redis.clients.jedis.HostAndPort">
            <constructor-arg name="host" value="${redis.host3}"/>
            <constructor-arg name="port" value="${redis.port3}"/>
        </bean>
        <bean id="hostport4" class="redis.clients.jedis.HostAndPort">
            <constructor-arg name="host" value="${redis.host4}"/>
            <constructor-arg name="port" value="${redis.port4}"/>
        </bean>
        <bean id="hostport5" class="redis.clients.jedis.HostAndPort">
            <constructor-arg name="host" value="${redis.host5}"/>
            <constructor-arg name="port" value="${redis.port5}"/>
        </bean>
        <bean id="hostport6" class="redis.clients.jedis.HostAndPort">
            <constructor-arg name="host" value="${redis.host6}"/>
            <constructor-arg name="port" value="${redis.port6}"/>
        </bean>

        <bean id="redisCluster" class="redis.clients.jedis.JedisCluster">
            <constructor-arg name="nodes">
                <set>
                    <ref bean="hostport1"/>
                    <ref bean="hostport2"/>
                    <ref bean="hostport3"/>
                    <ref bean="hostport4"/>
                    <ref bean="hostport5"/>
                    <ref bean="hostport6"/>
                </set>
            </constructor-arg>
            <constructor-arg name="timeout" value="6000"/>
            <constructor-arg name="poolConfig">
                <ref bean="jedisPoolConfig"/>
            </constructor-arg>
        </bean>
         end -->

    <!-- 单个redis配置 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="usePool" value="true"></property>
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="6379"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>
</beans>